"use strict";(self.webpackChunkcryptbd=self.webpackChunkcryptbd||[]).push([[233],{9986:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>n,metadata:()=>t,toc:()=>d});var i=s(4848),o=s(8453);const n={sidebar_label:"Dise\xf1o",sidebar_position:1},c="Dise\xf1o",t={id:"dise\xf1o/dise\xf1o",title:"Dise\xf1o",description:"Dise\xf1o Arquitect\xf3nico",source:"@site/docs/dise\xf1o/dise\xf1o.md",sourceDirName:"dise\xf1o",slug:"/dise\xf1o/",permalink:"/cryptbd-documentation/docs/dise\xf1o/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dise\xf1o/dise\xf1o.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Dise\xf1o",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n",permalink:"/cryptbd-documentation/docs/introduccion"},next:{title:"Desarrollo",permalink:"/cryptbd-documentation/docs/desarrollo/"}},r={},d=[{value:"Dise\xf1o Arquitect\xf3nico",id:"dise\xf1o-arquitect\xf3nico",level:2},{value:"Dise\xf1o Detallado",id:"dise\xf1o-detallado",level:2}];function l(e){const a={h1:"h1",h2:"h2",img:"img",p:"p",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.h1,{id:"dise\xf1o",children:"Dise\xf1o"}),"\n",(0,i.jsx)(a.h2,{id:"dise\xf1o-arquitect\xf3nico",children:"Dise\xf1o Arquitect\xf3nico"}),"\n",(0,i.jsx)(a.p,{children:"Para el desarrollo del proyecto decidimos utilizar una arquitectura basada en microservicios. Esto facilita la identificaci\xf3n y resoluci\xf3n de problemas, as\xed como la implementaci\xf3n de actualizaciones y mejoras. Cada microservicio puede ser escalado de manera independiente optimizando los recursos y mejorando el rendimiento general del sistema."}),"\n",(0,i.jsx)(a.p,{children:"Nuestro sistema cuenta de una webapp y dos microservicios personalizados. La webapp act\xfaa como el punto de entrada principal para los usuarios ofreciendo una interfaz amigable y accesible. Adem\xe1s, funciona como un API gateway redirigiendo las solicitudes a los microservicios correspondientes. El primer microservicio se encarga de todas las operaciones relacionadas con la gesti\xf3n de usuarios, autenticaci\xf3n, manejo de billeteras y balance de cuentas. Utiliza una base de datos como fuente principal de datos, asegurando la persistencia y la integridad de la informaci\xf3n. El segundo microservicio se centra en el an\xe1lisis exploratorio de datos y consume una API externa para obtener datos actualizados del mercado de criptomonedas en tiempo real."}),"\n",(0,i.jsx)(a.p,{children:"Con esta arquitectura aseguramos un sistema modular, flexible y escalable que puede evolucionar seg\xfan las necesidades del proyecto y adaptarse a futuras demandas y cambios tecnol\xf3gicos."}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"alt text",src:s(8629).A+"",width:"975",height:"266"})}),"\n",(0,i.jsx)(a.h2,{id:"dise\xf1o-detallado",children:"Dise\xf1o Detallado"}),"\n",(0,i.jsx)(a.p,{children:"Para el desarrollo de los microservicios decidimos utilizar una arquitectura basada en capas, donde cada una se encarga de una funci\xf3n espec\xedfica y se comunica con las capas adyacentes a trav\xe9s de interfaces. Cuentan con cuatro capas, tres secuenciales, la capa de presentaci\xf3n, la capa de negocio y la capa de acceso a datos, y una capa transversal, que es la capa de modelo. De esta forma, aplicamos algunos principios de dise\xf1o como la abstracci\xf3n, el encapsulamiento, la alta cohesi\xf3n y el bajo acoplamiento."}),"\n",(0,i.jsx)(a.p,{children:"La capa de presentaci\xf3n es responsable de gestionar la interacci\xf3n con el usuario o los sistemas externos. Incluye controladores y endpoints que reciben y responden a las solicitudes, asegurando una comunicaci\xf3n efectiva con el cliente. Aqu\xed es donde se valida y se transforma la entrada del usuario antes de pasarla a la capa de negocio."}),"\n",(0,i.jsx)(a.p,{children:"La capa de negocio contiene la l\xf3gica central del microservicio. Aqu\xed se implementan las reglas de negocio y la l\xf3gica espec\xedfica de cada funcionalidad. Esta capa se encarga de procesar los datos recibidos de la capa de presentaci\xf3n y de coordinar las operaciones necesarias para cumplir con los requisitos del negocio."}),"\n",(0,i.jsx)(a.p,{children:"La responsabilidad principal de la capa de acceso de datos es facilitar la interacci\xf3n entre el microservicio y la fuente de datos. Adem\xe1s, se encarga de realizar operaciones de lectura, escritura y manipulaci\xf3n de datos."}),"\n",(0,i.jsx)(a.p,{children:"La capa de modelo es una capa transversal que define las estructuras de datos que se utilizan en todo el sistema. Contiene las definiciones de las entidades, DTOs (Data Transfer Objects) y otros modelos de datos que se comparten entre las diferentes capas. Esta capa promueve la reutilizaci\xf3n de los modelos y mantiene la consistencia de los datos a lo largo del microservicio."}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"alt text",src:s(8439).A+"",width:"661",height:"450"})})]})}function u(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8439:(e,a,s)=>{s.d(a,{A:()=>i});const i=s.p+"assets/images/image-1-ced24c843a99c348ea8e6856c43ccc11.png"},8629:(e,a,s)=>{s.d(a,{A:()=>i});const i=s.p+"assets/images/image-16039f28161f6fa6c50d50e14c6eac61.png"},8453:(e,a,s)=>{s.d(a,{R:()=>c,x:()=>t});var i=s(6540);const o={},n=i.createContext(o);function c(e){const a=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),i.createElement(n.Provider,{value:a},e.children)}}}]);